; Computational Finance

; the procedural rhetoric is a twist on my computaitonal finance thesis.
; in my thesis, i talk about using computer algorithms to "pay people to vote"
; here, i remove the idea of money altogether â€” cut out the middle man
; on a ship, a sailor doesn't spend money to get coffee.
; he just goes and gets it, and the accounting book is updated.
; things are rationed rationally.
; so, a little proof of concept about a society where algorithms allocate resources rationally.
; fuller says, "cosmic accounting" on "spaceship earth"
; eventually, the idea is sort of 'reverse Sims'
; that is, an algorithm meets our needs like we meet the ; Sims' needs. 


; here's the necessary opening clauses
(defdomain compfin 
  (
  	; here's my move operator focsued on getting things to people. 
  	(:operator (!move ?res ?loc1 ?loc2 ?per) ; this is the input variables.
  	    ((exists ?res ?loc1) (exists ?per ?loc2)) ; this is the preconditions 
  	    ((exists ?res ?loc1)) ; this is the delete operator
  	    ()) ; this is the add operator
  	; here's my make operator focused on getting resources in the wild to a factory.
	(:operator (!make ?res ?fac ?loc)
		((factory ?fac) (exists ?fac ?loc) (exists ?prereq ?loc)) ; ?prereq has to do with the recipe function i wrote
		((exists ?prereq ?loc))
		((exists ?res ?loc)))
	; this is my main method which uses the operators to complete the resource allocation task.
  	(:method (allocate ?res ?per ?loc-per)
  		((exists ?res ?loc-res))
  		((!move ?res ?loc-res ?loc-per ?per))
  		((recipe ?res ?prereq) (exists ?prereq ?loc-fac) (factory ?fac ?loc-fac) (exists ?fac ?loc-fac)) 
  		; for example, gold is ?prereq for gold-ring
  		((!make ?res ?fac ?loc-fac)
  		 (!move ?res ?loc-fac ?loc-per ?per))
        ((recipe ?res ?prereq) (exists ?fac ?loc-fac) (factory ?fac) (exists ?prereq ?loc-prereq)) 
        ((!move ?prereq ?loc-prereq ?loc-fac ?fac) (!make ?res ?fac ?loc-fac) (!move ?res ?loc-fac ?loc-per ?per))
  		)
    )
  )